---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Authentication Stack

Parameters:
  pAppName:
    Type: String
    Description: Unique namespace for Cognito-based app stack resources
  pEnvironment:
    Type: String
    Description: Authentication Stack environment
    AllowedValues: [ "development", "test", "production" ]
  pBuildTag:
    Type: String
    Description: The version control Commit Id
  pParentHostedZoneName:
    Type: String
    Description: The parent hosted zone to create the Authentication Stack sub-domain in
  pAuthDomainName:
    Type: String
    Description: The Authentication Stack sub-domain endpoint (hosted zone)
  pApiDomainName:
    Type: String
    Description: The Authentication Stack Authentication API domain name for e.g. app redirects
  pAndroidAppClientCallbackURL:
    Type: String
    Description: The callback URL for Android applications (stage ONE of sign-up, sign-in, forgot password and resend code)
  pAndroidAppClientLogoutURL:
    Type: String
    Description: The logout URL for Android applications (stage TWO of sign-up, sign-in, forgot password and resend code)
  pIosAppClientCallbackURL:
    Type: String
    Description: The callback URL for IOS applications (stage ONE of sign-up, sign-in, forgot password and resend code)
  pIosAppClientLogoutURL:
    Type: String
    Description: The logout URL for IOS applications
  pLogLevel:
    Type: String
    Description: The logging level to use in Lambda code
  pPublishUserEvents:
    Type: String
    Description: Whether to publish user events to SNS topic
    AllowedValues: [ 'true', 'false' ]

Conditions:
  cIsProduction: !Equals [ !Ref pEnvironment, "production" ]

Mappings: {}

Resources:

###########################################################
### Cognito Triggers
###########################################################

  rCognitoUserPreSignUpLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rCognitoUserPreSignUpFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  rCognitoUserPreSignUpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      AutoPublishAlias: 'current'
      FunctionName: !Sub '${pAppName}-${pEnvironment}-CognitoUserPreSignUpFunction'
      Handler: main.handler
      Runtime: python3.7
      CodeUri: ./CognitoUserPreSignUp/
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt rCognitoAuthFunctionIAMRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          BUILD_TAG: !Ref pBuildTag # Force Cloudformation/Secrets Manager evaluation on each commit

  rCognitoUserPreSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${rCognitoUserPreSignUpFunction}'
      RetentionInDays: 90

  # Encrypt the Cloudwatch Logs
  # Custom resource as cfn doesn't (yet) support associating KMS keys with log groups
  rCognitoUserPreSignUpLogGroupKeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref rCognitoUserPreSignUpLogGroup

  rCognitoUserSignInLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rCognitoUserSignInFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  rCognitoUserSignInFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      AutoPublishAlias: 'current'
      FunctionName: !Sub '${pAppName}-${pEnvironment}-CognitoUserSignInFunction'
      Handler: main.handler
      Runtime: python3.7
      CodeUri: ./CognitoUserSignIn/
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt rCognitoAuthFunctionIAMRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          BUILD_TAG: !Ref pBuildTag  # Force Cloudformation/Secrets Manager evaluation on each commit
          PUBLISH_USER_EVENTS: !Ref pPublishUserEvents
          USER_EVENT_TOPIC: !Ref rCognitoUserEventTopic

  rCognitoUserSignInLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${rCognitoUserSignInFunction}'
      RetentionInDays: 90

  # Encrypt the Cloudwatch Logs
  # Custom resource as cfn doesn't (yet) support associating KMS keys with log groups
  rCognitoUserSignInLogGroupKeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref rCognitoUserSignInLogGroup

  rCognitoCreateUserPostConfirmationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rCognitoCreateUserPostConfirmationFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  rCognitoCreateUserPostConfirmationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      AutoPublishAlias: 'current'
      FunctionName: !Sub '${pAppName}-${pEnvironment}-CreateUserPostConfirmationFunction'
      Handler: main.handler
      Runtime: python3.7
      CodeUri: ./CognitoCreateUserPostConfirmation/
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt rCognitoAuthFunctionIAMRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          BUILD_TAG: !Ref pBuildTag  # Force Cloudformation/Secrets Manager evaluation on each commit
          PUBLISH_USER_EVENTS: !Ref pPublishUserEvents
          USER_POOL_ID: !Ref rUserPool
          USER_GROUP_NAME: !Ref rCognitoPublicAppUserGroup
          USER_EVENT_TOPIC: !Ref rCognitoUserEventTopic

  rCognitoCreateUserPostConfirmationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${rCognitoCreateUserPostConfirmationFunction}'
      RetentionInDays: 90

  # Encrypt the Cloudwatch Logs
  # Custom resource as cfn doesn't (yet) support associating KMS keys with log groups
  rCognitoCreateUserPostConfirmationLogGroupKeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref rCognitoCreateUserPostConfirmationLogGroup

  rAppLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${pAppName}-${pEnvironment} Lambda security group'

  rCognitoAuthFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - !Ref rCognitoAuthFunctionIAMPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"

  # Create and attach managed policy to avoid circular dependencies
  rCognitoAuthFunctionIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Cognito Auth functions policy'
      ManagedPolicyName: !Sub '${pAppName}-${pEnvironment}-cognito-auth-function-policy'
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: sns:publish
            Resource: !Ref rCognitoUserEventTopic
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: !GetAtt rUserInfoEncryptionKey.Arn
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminDisableUser
              - cognito-idp:AdminEnableUser
              - cognito-idp:ListUsers
            Resource: !GetAtt rUserPool.Arn

  rUserInfoEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'Used to encrypt the user and user defaults events because they may contain sensitive data'
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: "*"

  rUserInfoEncryptionKeylias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${pAppName}-${pEnvironment}'
      TargetKeyId: !Ref rUserInfoEncryptionKey

  # User Events like change, migration, sign-up, sign-in
  rCognitoUserEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${pAppName}-${pEnvironment}-cognito-user-event'
      # 5 minutes between key rotations
      KmsMasterKeyId: !Ref rUserInfoEncryptionKey

  rAuthHostedZone: 
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: !Sub '${pAuthDomainName} domain'
      Name: !Ref pAuthDomainName

  rParentHostedZoneNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName  : !Ref pParentHostedZoneName
      Comment: Authentication Stack sub-domain NS record.
      Name: !Join [ "", [ !Ref pAuthDomainName, "." ] ]
      Type: NS
      TTL: '300'
      ResourceRecords: !GetAtt rAuthHostedZone.NameServers

  # Creates a role that allows Cognito to send SNS messages
  rSNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${pAppName}-${pEnvironment}-cognito-idp-policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/cognito/*"

  #####################################################################
  # NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE !
  # Be very-very careful changing the user pool! If you change the wrong resource parameters below you can end up
  # with Cloudformation building a *new* user pool with no users (although retaining the old one as per DeletionPolicy)
  # DO NOT change the user pool Schema, UsernameAttributes, AutoVerifiedAttributes, UserPoolName
  # You MAY change LambdaConfig
  # IF IN DOUBT PLEASE CONTACT AWS SUPPORT FIRST TO CHECK WHICH PARAMETERS CAN BE CHANGED WITHOUT SUFFERING A LOSS
  # NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE ! NOTE !
  #####################################################################
  rUserPool:
    DeletionPolicy: Retain
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${pAppName}-${pEnvironment}-user-pool'
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        # ARN generation here is necessary to avoid circular dependencies where the
        # lambda requires UserPool Ref's and the UserPool requires Lambda Arn's
        PostConfirmation: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pAppName}-${pEnvironment}-CreateUserPostConfirmationFunction'
        PreAuthentication: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pAppName}-${pEnvironment}-CognitoUserSignInFunction'
        PreSignUp: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pAppName}-${pEnvironment}-CognitoUserPreSignUpFunction'
        PostAuthentication: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pAppName}-${pEnvironment}-CognitoUserSignInFunction'
      MfaConfiguration: "OPTIONAL"
      SmsConfiguration:
        ExternalId: !Sub '${pAppName}-${pEnvironment}-external'
        SnsCallerArn: !GetAtt rSNSRole.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        -  email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: false
          # Cloudformation will re-create the user pool if we attempt to *add*
          # additional fields later on despite Cognito having no such
          # requirement. Below is therefore a hacky attempt a future proofing
          # by adding some generic fields.
        - Name: field1
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: field2
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: field3
          AttributeDataType: String
          Mutable: true
          Required: false
# Requires SES configuration
#      EmailConfiguration:
#        ReplyToEmailAddress: !Sub 'hello@${pApiDomainName}'
#        SourceArn: !Sub 'arn:aws:ses:eu-west-1:${AWS::AccountId}:identity/hello@${pApiDomainName}'
      EmailVerificationSubject: !If [ cIsProduction, 'Verification', !Sub '${pEnvironment} - verification' ]
      EmailVerificationMessage: 'Code: {####}'

  rUserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      UserPoolId: !Ref rUserPool
      CustomDomainConfig:
        CertificateArn: !Sub '{{resolve:secretsmanager:${pAppName}-${pEnvironment}:SecretString:AuthDomainCertificateArn}}'
      Domain: !Ref pAuthDomainName

  rUserPoolDomainDNSARecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref rAuthHostedZone
      Comment: Authentication Stack domain A alias record for Cognito Cloudfront distribution
      RecordSets:
      - Name: !Join [ "", [ !Ref pAuthDomainName, "." ] ]
        Type: A
        AliasTarget:
          HostedZoneId: "Z2FDTNDATAQYW2"
          DNSName: !Ref rUserPoolDomain

  # Creates a Federated Identity pool
  rIdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${pAppName}${pEnvironment}'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref rFederatedUserPoolClient
          ProviderName: !GetAtt rUserPool.ProviderName

  # Creates a User Pool Client to be used by the Federated Identity pool
  rFederatedUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${pAppName}-${pEnvironment}-federated-client'
      GenerateSecret: false
      UserPoolId: !Ref rUserPool
      SupportedIdentityProviders:
        - 'COGNITO'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid

  rAndroidAppClient:
    Type: 'AWS::Cognito::UserPoolClient'
    # Needs the internal scope to be created
    Properties:
      ClientName: !Sub '${pAppName}-${pEnvironment}-android-client'
      GenerateSecret: false
      UserPoolId: !Ref rUserPool
      SupportedIdentityProviders:
        - 'COGNITO'
      CallbackURLs:
        - !Ref pAndroidAppClientCallbackURL
      LogoutURLs:
        - !Ref pAndroidAppClientLogoutURL
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      ExplicitAuthFlows:
        - 'USER_PASSWORD_AUTH'

  rIosAppClient:
    Type: 'AWS::Cognito::UserPoolClient'
    # Needs the internal scope to be created
    Properties:
      ClientName: !Sub '${pAppName}-${pEnvironment}-ios-client'
      GenerateSecret: false
      UserPoolId: !Ref rUserPool
      SupportedIdentityProviders:
        - 'COGNITO'
      CallbackURLs:
        - !Ref pIosAppClientCallbackURL
      LogoutURLs:
        - !Ref pIosAppClientLogoutURL
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      ExplicitAuthFlows:
        - 'USER_PASSWORD_AUTH'

  # Demonstrate use of client credentials for
  # service-to-service communication
  rApiResourceServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Identifier: !Sub '${pAppName}-${pEnvironment}-api-server'
      Name: !Sub '${pAppName}-${pEnvironment}-api-server'
      UserPoolId: !Ref rUserPool
      Scopes:
        - ScopeName: !Sub '${pApiDomainName}/clientcred'
          ScopeDescription: API resource server for Client Credentials access

  # Creates an Internal User Pool Client to be used for client device access
  rApiClient:
    Type: 'AWS::Cognito::UserPoolClient'
    # Needs resource server & scope to be created
    DependsOn: rApiResourceServer
    Properties:
      ClientName: !Sub '${pAppName}-${pEnvironment}-api-client'
      GenerateSecret: true
      UserPoolId: !Ref rUserPool
      SupportedIdentityProviders:
        - !Ref AWS::NoValue
      CallbackURLs:
        - !Sub 'https://${pApiDomainName}/callback'
      LogoutURLs:
        - !Sub 'https://${pApiDomainName}/logout'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - !Sub '${pApiDomainName}/clientcred'

  rUserPoolLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-update-user-pool-client'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - 'cognito-idp:CreateUserPoolClient'
                  - 'cognito-idp:UpdateUserPoolClient'
                  - 'cognito-idp:DeleteUserPoolClient'
                Resource: '*'
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-manage-resource-server'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeResourceServer
                  - cognito-idp:CreateResourceServer
                  - cognito-idp:UpdateResourceServer
                  - cognito-idp:DeleteResourceServer
                Resource: '*'
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-manage-user-pool-domain'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - 'cognito-idp:CreateUserPoolDomain'
                  - 'cognito-idp:UpdateUserPoolDomain'
                  - 'cognito-idp:DeleteUserPoolDomain'
                Resource: '*'
              - Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-update-cloudfront'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                - cloudfront:updateDistribution
                Resource:
                - "*"

  rCognitoPublicAppUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: 'Cognito user group for public App users'
      GroupName: !Sub '${pAppName}-${pEnvironment}-public-app-user'
      Precedence: 100
#      RoleArn: String
      UserPoolId: !Ref rUserPool

  # Create a role for unauthorized/guest access to AWS resources.
  # Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref rIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-cognito-unauthorized-policy'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref rIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub '${pAppName}-${pEnvironment}-cognito-authorized-policy'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-identity:*"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref rIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  rApiDnsRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref pParentHostedZoneName
      Comment: Domain A record for Cloudfront
      RecordSets:
      - Name: !Sub '${pApiDomainName}.'
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt rApiDomain.DistributionHostedZoneId
          DNSName: !GetAtt rApiDomain.DistributionDomainName

  rApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  rApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: [rApiDomain]
    Properties:
      RestApiId: !Ref rApi
      DomainName: !Ref pApiDomainName
      Stage: Prod

  rApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Sub '{{resolve:secretsmanager:${pAppName}-${pEnvironment}:SecretString:ApiDomainCertificateArn}}'
      DomainName: !Ref pApiDomainName

  rApiFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rApiFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  rApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${pAppName}-${pEnvironment}-ApiFunction'
      Runtime: python3.7
      Handler: main.handler
      CodeUri: ./Api/
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt rCognitoAuthFunctionIAMRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          BUILD_TAG: !Ref pBuildTag  # Force Cloudformation/Secrets Manager evaluation on each commit
          ANDROID_APP_CLIENT_IDS : !Ref rAndroidAppClient
          IOS_APP_CLIENT_IDS : !Ref rIosAppClient
      Events:
        User:
          Type: Api
          Properties:
            Path: '/user'
            Method: get
            RestApiId: !Ref rApi
        Guest:
          Type: Api
          Properties:
            Path: '/guest'
            Method: get
            RestApiId: !Ref rApi
        Unauthenticated:
          Type: Api
          Properties:
            Path: '/unauthenticated'
            Method: get
            RestApiId: !Ref rApi

  rApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${rApiFunction}'
      RetentionInDays: 90

  # Encrypt the Cloudwatch Logs
  # Custom resource as cfn doesn't (yet) support associating KMS keys with log groups
  rApiFunctionLogGroupKeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref rApiFunctionLogGroup

  rDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${pAppName}-${pEnvironment}-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets" : [
            {
              "type" : "metric",
              "x" : 0,
              "y" : 0,
              "width" : 8,
              "height" : 6,
              "properties" : {
                "title" : "SignUps",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${rCognitoUserPreSignUpFunction}", { "id": "presignupinvocations", "label": "Pre-SignUp Invocations", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${rCognitoUserPreSignUpFunction}", { "id": "presignuperrors", "label": "Pre-SignUp Errors", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${rCognitoUserPreSignUpFunction}", { "id": "presignupduration", "label": "Pre-SignUp Duration", "stat": "Maximum", "yAxis": "right" } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${rCognitoCreateUserPostConfirmationFunction}", { "id": "postsignupinvocations", "label": "Post-SignUp Invocations", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${rCognitoCreateUserPostConfirmationFunction}", { "id": "postsignuperrors", "label": "Post-SignUp Errors", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${rCognitoCreateUserPostConfirmationFunction}", { "id": "postsignupduration", "label": "Post-SignUp Duration", "stat": "Maximum", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "yAxis": { "left":{ "min": 0 }, "right":{ "min": 0 } }
              }
            },
            {
              "type" : "metric",
              "x" : 8,
              "y" : 0,
              "width" : 8,
              "height" : 6,
              "properties" : {
                "title" : "SignIns",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${rCognitoUserSignInFunction}", { "id": "prepostsignupinvocations", "label": "Pre-SignIn Invocations", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${rCognitoUserSignInFunction}", { "id": "prepostsignuperrors", "label": "Pre-SignIn Errors", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${rCognitoUserSignInFunction}", { "id": "prepostsignupduration", "label": "Pre-SignIn Duration", "stat": "Maximum", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "yAxis": { "left":{ "min": 0 }, "right":{ "min": 0 } }
              }
            },
            {
              "type" : "metric",
              "x" : 16,
              "y" : 6,
              "width" : 8,
              "height" : 6,
              "properties" : {
                "title" : "API",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${rApiFunction}", { "id": "apifunctioninvocations", "label": "API Invocations", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${rApiFunction}", { "id": "apifunctionerrors", "label": "API Errors", "stat": "Sum", "yAxis": "left" } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${rApiFunction}", { "id": "apifunctionduration", "label": "API Duration", "stat": "Maximum", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "yAxis": { "left":{ "min": 0 }, "right":{ "min": 0 } }
              }
            }
          ]
        }

Outputs:
  UserPool:
    Value: !Ref rUserPool
    Export:
      Name: !Sub '${pAppName}-${pEnvironment}-user-pool'

  UserPoolClient:
    Value: !Ref rFederatedUserPoolClient
    Export:
      Name: !Sub '${pAppName}-${pEnvironment}-user-pool-client'

  IdentityPool:
    Value: !Ref rIdentityPool
    Export:
      Name: !Sub '${pAppName}-${pEnvironment}-identity-pool'

  BuildTag:
    Value: !Ref pBuildTag

  CognitoUserEventTopic:
    Value: !Ref rCognitoUserEventTopic
    Export:
      Name: !Sub '${pAppName}-${pEnvironment}-user-event-topic'

  AndroidAppClientSignInUrl:
    Value: !Sub 'https://${pAuthDomainName}/login?response_type=code&client_id=${rAndroidAppClient}&redirect_uri=${pAndroidAppClientCallbackURL}'

  IosAppClientSignInUrl:
    Value: !Sub 'https://${pAuthDomainName}/login?response_type=code&client_id=${rIosAppClient}&redirect_uri=${pIosAppClientCallbackURL}'

  # From: https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html
  JsonWebKeyUrl:
    Value: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${rUserPool}/.well-known/jwks.json'
    Export:
      Name: !Sub '${pAppName}-${pEnvironment}-json-webkey-url'
